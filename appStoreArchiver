#!/bin/bash

###
### CUSTOM VARIABLES
###

# App Store
# To get the ID of an App Store app: 
#		* Naviage to the app install page,
#		* Select "Copy Link" from the arrow dropdown to the right of the install button.
#		* Copy the numbers between '../app/../id' and '?'
#		* Example: https://itunes.apple.com/se/app/macos-sierra/id1127487414?l=en&mt=12
#		* Example ID: 1127487414
appstore_application_ids=( "" )
appstore_installer_ids=( "" )
appstore_appleid=""
appstore_password=""

# Base
base_path="/Users/Shared"

# Archive
archive_path="${base_path}/Archive"

# Logged In User
logged_in_user=$( ioreg -n Root -d1 -a | xpath '/plist/dict/key[.="IOConsoleUsers"]/following-sibling::array/dict/key[.="kCGSSessionOnConsoleKey"]/following-sibling::*[1][name()="true"]/../key[.="kCGSSessionUserNameKey"]/following-sibling::string[1]/text()' 2>/dev/null )

###
### SOURCE CONFIGURATION
###

# This will source a configuration file named 'appStoreArchiver.conf' in a directory named 'appStoreArchiverConfig'
script_folder="$( ( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd ) )"
script_configuration="$( ( cd "${script_folder}/../appStoreArchiverConfig"; pwd ) )/appStoreArchiver.conf"

# Source a configuration file that may override any of the above variables
if [[ -f ${script_configuration} ]]; then
	source "${script_configuration}"
fi

###
### STATIC VARIABLES
###

# Script
script_name="$( basename $0 )"
declare -a script_mountpoints

# mas-cli
mas="${base_path}/bin/mas"
mas_github_repo="mas-cli/mas"

# Log
log_path="/tmp/${script_name%.*}.log"

###
### FUNCTIONS
###

function sch_trap() {
	for mountpoint in ${script_mountpoints[@]}; do
		if [[ -d ${mountpoint} ]]; then
			/usr/bin/hdiutil detach "${mountpoint}" -force 1> /dev/null && /bin/rm -rf "${mountpoint}"
		fi
	done
}

function sch_log() {
	printf "%s\n" "$( /bin/date +%F_%H:%M:%S ) ${FUNCNAME[1]}: ${1}" | /usr/bin/tee -a "${log_path}"
}

function sch_log_exit() {
	printf "%s\n" "$( /bin/date +%F_%H:%M:%S ) ${FUNCNAME[1]}: ${1}" | /usr/bin/tee -a "${log_path}"; exit ${2:1}
}

function sch_archive_application() {

	# Get path to all applications matching both the name and the version of the reported application
	# NOTE: Currently if there are multiple paths, only the first one is used
	IFS=$'\n' app_paths=( $( /usr/bin/mdfind "(** == ${1} && kMDItemContentType=com.apple.application-bundle)" ) )

	for app_path in "${app_paths[@]}"; do
		
		# Verfiy path exists
		if ! [[ -d ${app_path} ]]; then
			sch_log "${app_path}: No such file or directory"
			continue
		fi
		
		# Get application name
		local app_name=$( /usr/libexec/PlistBuddy -c "Print CFBundleDisplayName" "${app_path}/Contents/Info.plist" 2>/dev/null )
		if [[ -z ${app_name} ]]; then
			app_name=$( /usr/libexec/PlistBuddy -c "Print CFBundleName" "${app_path}/Contents/Info.plist" )	
		fi
		
		# Get application version
		local app_version=$( /usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" "${app_path}/Contents/Info.plist" )
		
		# Get application bundle version
		local app_bundleversion=$( /usr/libexec/PlistBuddy -c "Print CFBundleVersion" "${app_path}/Contents/Info.plist" )

		# Create archive name and archive path variables
		local app_archivename=$( sed 's/\ //g' <<< "${app_name}_${app_version}-${app_bundleversion}" )
		app_archivepath="${archive_path}/${app_name}/${app_archivename}.dmg"

		if ! [[ -f ${app_archivepath} ]]; then
			
			# Kill the application if it is running
			if ! /usr/bin/osascript -e 'quit app '\"${app_name}\"''; then
				sch_log "Failed to quit process with name: ${app_name}"
				continue
			fi
			
			# Create target parent directory
			/bin/mkdir -p "$( dirname "${app_archivepath}" )" >> "${log_path}" 2>&1 || sch_log_exit "Failed to create parent folder: ${archive_path}"
			
			# Create archive dmg
			/usr/bin/hdiutil create -srcfolder "${app_path}" -volname "${app_archivename}" "${app_archivepath}" 1> /dev/null || sch_log_exit "Failed to create dmg archive from downloaded application at: ${app_path}"
		fi
	done
}

function sch_archive_installer() {

	# Get path to all applications matching both the name and the version of the reported application
	if [[ ${1} =~ ^[0-9]+$ ]]; then
		IFS=$'\n' app_paths=( $( /usr/bin/mdfind "(** == ${1} && kMDItemCFBundleIdentifier == 'com.apple.InstallAssistant.*'c && kMDItemContentType=com.apple.application-bundle)" ) )
	else
		IFS=$'\n' app_paths=( $( /usr/bin/mdfind "(kMDItemCFBundleIdentifier == '${1}'c && kMDItemContentType=com.apple.application-bundle)" ) )
	fi

	for app_path in "${app_paths[@]}"; do

		# Verfiy path exists
		if ! [[ -d ${app_path} ]]; then
			sch_log_exit "No path returned from mdfind"	
		fi

		# Get installer name
		local app_name=$( /usr/libexec/PlistBuddy -c "Print CFBundleDisplayName" "${app_path}/Contents/Info.plist" )
		if [[ -z ${app_name} ]]; then
			app_name=$( /usr/libexec/PlistBuddy -c "Print CFBundleName" "${app_path}/Contents/Info.plist" )	
		fi
	
		# Kill the application if it is running
		/usr/bin/osascript -e 'quit app '\"${app_name}\"'' || sch_log_exit "Failed to quit process with name: ${app_name}"
		
		# Set the basesystem path to the new installer formats path
		local basesystem_path="${app_path}/Contents/SharedSupport/BaseSystem.dmg"
		
		if ! [[ -f ${basesystem_path} ]]; then
		
			# Get mountpoint for the InstallESD dmg inside the installer (if it is mounted)
			local installesd_mountpoint=$( /usr/bin/hdiutil info -plist | /usr/bin/xpath "/plist/dict/key[.='images']/following-sibling::array/dict/key[.='image-path']/following-sibling::string[1][contains(., \"${app_path}/Contents/SharedSupport/InstallESD.dmg\")]/../key[.='system-entities']/following-sibling::array/dict/key[.='mount-point']/following-sibling::string/text()" 2>/dev/null )
			if ! [[ -d ${installesd_mountpoint} ]]; then
		
				# Create temporary directory
				local installesd_mountpoint="$( /usr/bin/mktemp -d /private/tmp/dmg.XXXXX )" || sch_log_exit "Failed to create InstallESD mountpoint"
		
				# Attach the InstallESD to the temporary directory
				/usr/bin/hdiutil attach "${app_path}/Contents/SharedSupport/InstallESD.dmg" -noverify -nobrowse -readonly -owners on -mountpoint "${installesd_mountpoint}" 1> /dev/null || sch_log_exit "Failed to attach InstallESD: ${app_path}/Contents/SharedSupport/InstallESD.dmg to mountpoint: ${installesd_mountpoint}"
			fi
	
			local basesystem_path="${installesd_mountpoint}/BaseSystem.dmg"
	
			# Add mountpoint to script mountpoints
			script_mountpoints+=( "${installesd_mountpoint}" )
		fi
	
		# Get version and build
		if [[ -f ${basesystem_path} ]]; then
		
			# Create mountpoint for BaseSystem.dmg
			# Get mountpoint for the InstallESD dmg inside the installer (if it is mounted)
			local basesystem_mountpoint=$( /usr/bin/hdiutil info -plist | /usr/bin/xpath "/plist/dict/key[.='images']/following-sibling::array/dict/key[.='image-path']/following-sibling::string[1][contains(., \"${basesystem_path}\")]/../key[.='system-entities']/following-sibling::array/dict/key[.='mount-point']/following-sibling::string/text()" 2>/dev/null )
			if ! [[ -d ${basesystem_mountpoint} ]]; then
				
				local basesystem_mountpoint=$( mktemp -d /private/tmp/dmg.XXXXX ) || sch_log_exit "Unable to create BaseSystem mountpoint"
		
				# Attach BaseSystem.dmg
				/usr/bin/hdiutil attach "${basesystem_path}" -noverify -nobrowse -readonly -owners on -mountpoint "${basesystem_mountpoint}" 1> /dev/null || sch_log_exit "Failed to attach BaseSystem: ${basesystem_path} to mountpoint: ${basesystem_mountpoint}"
			
				# Add mountpoint to mountpoints to remove after checking has finished
				script_mountpoints+=( "${basesystem_mountpoint}" )
			fi
		
			# Set the SystemVersion.plist path	
			local systemversion_path="${basesystem_mountpoint}/System/Library/CoreServices/SystemVersion.plist"
		else
			local systemversion_path="${installesd_mountpoint}/System/Library/CoreServices/SystemVersion.plist"
		fi
	
		# Verify SystemVersion.plist exists
		if ! [[ -f ${systemversion_path} ]]; then
			sch_log_exit "SystemVersion.plist not found at: ${systemversion_path}"	
		fi
			
		# Get installer os build and version
		os_installer_version=$( /usr/libexec/PlistBuddy -c "Print :ProductUserVisibleVersion" "${systemversion_path}" )
		os_installer_build_version=$( /usr/libexec/PlistBuddy -c "Print :ProductBuildVersion" "${systemversion_path}" )
	
		# Detach BaseSystem dmg
		if [[ -d ${basesystem_mountpoint} ]]; then
			/usr/bin/hdiutil detach "${basesystem_mountpoint}" -force 1> /dev/null && rm -rf "${basesystem_mountpoint}" || sch_log_exit "Failed to detach BaseSystem dmg mounted at: ${basesystem_mountpoint}"
		fi
	
		# Detach InstallESD dmg
		if [[ -d ${installesd_mountpoint} ]]; then
			/usr/bin/hdiutil detach "${installesd_mountpoint}" -force 1> /dev/null && rm -rf "${installesd_mountpoint}" || sch_log_exit "Failed to detach InstallESD dmg mounted at: ${installesd_mountpoint}"
		fi
	
		# Remove quarantine attribute if present
		/usr/bin/xattr -d -r com.apple.quarantine "${app_path}" > /dev/null 2>&1
	
		# Create archive name and archive path variables
		local app_archivename=$( sed 's/\ //g' <<< "${app_name}_${os_installer_version}-${os_installer_build_version}" )
		os_installer_archivepath="${archive_path}/${app_name}/${app_archivename}.dmg"

		if ! [[ -f ${os_installer_archivepath} ]]; then
		
			# Create target parent directory
			/bin/mkdir -p "$( dirname "${os_installer_archivepath}" )" >> "${log_path}" 2>&1 || sch_log_exit "Failed to create parent folder: ${appstore_archive_path}"
	
			# Create archive dmg
			/usr/bin/hdiutil create -srcfolder "${app_path}" -volname "${app_archivename}" "${os_installer_archivepath}" 1> /dev/null || sch_log_exit "Failed to create dmg archive from downloaded application at: ${app_path}"
		fi
	done
}

function sch_install_mas-cli() {
	
	# Get tag and download URL from github API
	read -d "\n" -r mas_tag mas_url < <( curl -Ls "https://api.github.com/repos/${mas_github_repo}/releases/latest" | awk -F\" '/tag_name/ || (/browser_download_url/ && $0 !~ /xcarchive/) { print $(NF-1) }' )
	
	# Very basic verification that a tag and URL was returned from the github API
	if [[ -z ${mas_tag} ]] || ! [[ ${mas_url} =~ ^http[s]?://.* ]]; then
		sch_log "Invalid info returned from GitHub API"
		sch_log "mas_tag: ${mas_tag}"
		sch_log "mas_url: ${mas_url}"
		exit 1
	fi
	
	# Define paths to the local download and unzip directory
	mas_target_path="$( /usr/bin/dirname "${mas}" )/mas_$( /usr/bin/sed 's/[^0-9\.]//g' <<< "${mas_tag}" )"
	
	# Only download if current version doesn't exist
	if ! [[ -f ${mas_target_path} ]]; then
		
		# Create mas-cli download and unzip paths
		mas_zip_path="/tmp/mas-cli-${mas_tag}.zip"
		mas_unzip_path="${mas_zip_path%.*}"
		
		# Remove mas-cli download path if it exists
		/bin/rm -f "${mas_zip_path}" || sch_log_exit "Failed to remove existing mas-cli download path"
	
		# Try to download latest release
		/usr/bin/curl -sSL "${mas_url}" -o "${mas_zip_path}" || sch_log_exit "Failed to download mas-cli"
	
		# Try to unzip and downloaded file
		/usr/bin/unzip -qq -o "${mas_zip_path}" -d "${mas_unzip_path}" || sch_log_exit "Failed to unzip mas-cli"
	
		# Verify that the expected binary exists in the extraction directory
		if ! [[ -f "${mas_unzip_path}/mas" ]]; then 
			sch_log_exit "Expected binary: ${mas_unzip_path}/mas does not exist"
		fi
		
		# Create target parent directory
		/bin/mkdir -p "$( dirname "${mas}" )" >> "${log_path}" 2>&1 || sch_log_exit "Failed to create folder: ${1}"
		
		# Move and rename binary with tag info
		/bin/mv "${mas_unzip_path}/mas" "${mas_target_path}" || sch_log_exit "Failed to move: ${mas_unzip_path}/mas to: ${mas_target_path}"
		
		# Remove existing symbolic link
		/bin/rm -f "${mas}" || sch_log_exit "Failed to remove existing mas-cli symbolic link"
		
		# Create a symbolic link to the new version
		/bin/ln -s "${mas_target_path}" "${mas}" || sch_log_exit "Failed to create mas-cli symbolic link"
	fi
}

function sch_install_application() {
	
	for appstore_id in "${appstore_application_ids[@]}"; do
	
		sch_archive_application "${appstore_id}"
	
		# Sign in to App Store
		if [[ -n ${appstore_appleid} ]] && [[ -n ${appstore_password} ]]; then
			local mas_output=$( sudo -u "${logged_in_user}" "${mas}" signin "${appstore_appleid}" "${appstore_password}" )
			if [[ ${mas_output} =~ "Error" ]]; then
				sch_log_exit "Failed to sign in to the App Store using AppleID: ${appstore_appleid}"
			fi
		else
			sch_log "No AppleID is configured, will not attempt signin to AppStore"
		fi
	
		# Install or upgrade application
		local mas_output=$( sudo -u "${logged_in_user}" "${mas}" install "${appstore_id}" 2>&1 )
		if [[ ${mas_output} =~ 'is already installed' ]]; then
			sch_log "Latest version of application with id ${appstore_id} is already installed"
		fi
		
		sch_archive_application "${appstore_id}"
	done
}

function sch_install_installer() {
	
	for appstore_id in "${appstore_installer_ids[@]}"; do
	
		sch_archive_installer "${appstore_id}"
	
		# Sign in to App Store
		if [[ -n ${appstore_appleid} ]] && [[ -n ${appstore_password} ]]; then
			local mas_output=$( sudo -u "${logged_in_user}" "${mas}" signin "${appstore_appleid}" "${appstore_password}" )
			if [[ ${mas_output} =~ "Error" ]]; then
				sch_log_exit "Failed to sign in to the App Store using AppleID: ${appstore_appleid}"
			fi
		else
			sch_log "No AppleID is configured, will not attempt signin to AppStore"
		fi
	
		# Install or upgrade application
		local mas_output=$( sudo -u "${logged_in_user}" "${mas}" install "${appstore_id}" 2>&1 )
		if [[ ${mas_output} =~ 'is already installed' ]]; then
			sch_log "Latest version of application with id ${appstore_id} is already installed"
		fi
	
		sch_archive_installer "${appstore_id}"
	done
}

###
### MAIN SCRIPT
###

# Verify script is run with admin privileges
if [[ $EUID -ne 0 ]]; then 
	sch_log_exit "This script must be run with admin privileges"
fi

# Setup trap
trap sch_trap EXIT

# Install or update dependencies to latest versions
sch_install_mas-cli

# Install or update applications to latest version
sch_install_application
sch_install_installer